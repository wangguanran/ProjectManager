---
globs: test_*.py
description: 测试用例文档和跟踪
---

# 测试用例文档

## 测试用例ID命名规则

### 格式：M + 模块编号 + TC + 用例编号
- **M**: 模块缩写
- **模块编号**: 2位数字，从01开始
- **TC**: 测试用例缩写
- **用例编号**: 4位数字，从0001开始

### 模块编号分配
- `M01`: 日志管理器
- `M02`: 工具函数
- `M03`: 性能分析器
- `M04`: 命令行接口
- `M05`: 配置管理
- `M06`: Git操作
- `M07`: 插件系统
- `M08`: 集成测试
- `M09-M99`: 预留扩展模块

### 示例
- `M01-TC0001`: 日志管理器模块第1个测试用例
- `M01-TC0002`: 日志管理器模块第2个测试用例
- `M02-TC0001`: 工具函数模块第1个测试用例

## 测试用例记录表结构

| 列名 | 描述 | 必需 | 示例 |
|------|------|------|------|
| **测试用例ID** | 遵循M##-TC####格式的唯一标识符 | 是 | M01-TC0001 |
| **模块** | 被测试的源模块 | 是 | log_manager |
| **函数/方法** | 被测试的具体函数或方法 | 是 | setup_logger |
| **测试类型** | 测试类别（功能、边界、错误、性能、集成） | 是 | 功能测试 |
| **测试名称** | 测试用例的描述性名称 | 是 | test_setup_logger_with_valid_config |
| **优先级** | 测试优先级（高、中、低） | 是 | 高 |
| **测试场景** | 被测试内容的描述 | 是 | 验证使用有效配置参数设置日志记录器 |
| **测试步骤** | 详细步骤，包括设置、执行和验证 | 是 | 1. 创建有效配置字典<br>2. 调用setup_logger(config)<br>3. 验证日志记录器实例已创建 |
| **输入数据** | 测试输入参数和数据 | 是 | config = {"level": "INFO", "file": "test.log"} |
| **预期结果** | 预期输出或行为 | 是 | 创建具有INFO级别和文件输出的日志记录器实例 |
| **测试文件** | 测试文件路径 | 是 | tests/test_log_manager.py |
| **测试方法** | 具体测试方法名称 | 是 | test_setup_logger_with_valid_config |
| **自动化** | 是否支持自动化（是/否） | 是 | 是 |
| **状态** | 当前状态（未开始、进行中、通过、失败、阻塞） | 是 | 通过 |
| **创建日期** | 测试用例创建日期 | 是 | 2024-01-15 |
| **最后运行** | 测试最后执行日期 | 否 | 2024-01-20 |
| **依赖关系** | 依赖的其他测试用例或模块 | 否 | M01-TC0002 |
| **备注** | 其他注释或观察 | 否 | 需要临时目录 |

## 测试用例分类

### 1. 功能测试
- **目的**: 验证正常操作和预期行为
- **覆盖范围**: 快乐路径场景、有效输入、预期输出
- **优先级**: 高

### 2. 边界测试
- **目的**: 测试边界情况和边界条件
- **覆盖范围**: 空输入、null值、最大值/最小值
- **优先级**: 高

### 3. 错误测试
- **目的**: 验证错误处理和异常场景
- **覆盖范围**: 无效输入、异常条件、错误消息
- **优先级**: 高

### 4. 性能测试
- **目的**: 验证各种条件下的性能
- **覆盖范围**: 大输入、并发操作、时间性能
- **优先级**: 中

### 5. 集成测试
- **目的**: 验证组件间的交互
- **覆盖范围**: 模块交互、外部依赖
- **优先级**: 中

## 测试用例模板

```markdown
| 测试用例ID | 模块 | 函数/方法 | 测试类型 | 测试名称 | 优先级 | 测试场景 | 测试步骤 | 输入数据 | 预期结果 | 测试文件 | 测试方法 | 自动化 | 状态 | 创建日期 | 最后运行 | 依赖关系 | 备注 |
|------------|------|----------|----------|----------|--------|----------|----------|----------|----------|----------|----------|--------|------|----------|----------|----------|------|
| M01-TC0001 | log_manager | setup_logger | 功能测试 | test_setup_logger_with_valid_config | 高 | 验证使用有效配置设置日志记录器 | 1. 创建有效配置字典<br>2. 调用setup_logger(config)<br>3. 验证日志记录器实例已创建 | config = {"level": "INFO", "file": "test.log"} | 创建具有INFO级别和文件输出的日志记录器实例 | tests/test_log_manager.py | test_setup_logger_with_valid_config | 是 | 通过 | 2024-01-15 | 2024-01-20 | 无 | 需要临时目录 |
```

## 测试用例管理指南

### 1. 创建流程
1. **识别函数**: 确定需要测试的函数/方法
2. **分配ID**: 按照命名规则生成唯一测试用例ID
3. **定义场景**: 清楚描述被测试的内容
4. **编写步骤**: 详细说明测试执行步骤
5. **设置优先级**: 分配合适的优先级
6. **创建测试**: 实现实际的测试代码
7. **更新状态**: 跟踪测试用例状态

### 2. 维护流程
1. **定期审查**: 定期审查测试用例覆盖范围
2. **更新状态**: 保持测试用例状态最新
3. **添加依赖**: 记录测试用例关系
4. **重构**: 代码变更时更新测试用例
5. **归档**: 删除过时的测试用例

### 3. 质量门控
- [ ] 测试用例ID遵循命名规则
- [ ] 所有必需字段已填写
- [ ] 测试步骤清晰可执行
- [ ] 预期结果具体可测量
- [ ] 测试文件和方法名称正确
- [ ] 优先级分配适当
- [ ] 依赖关系已记录

## 与开发工作流集成

### 测试驱动开发集成
1. **编写测试用例**: 在编写代码前创建测试用例记录
2. **实现测试**: 编写实际的测试代码
3. **运行测试**: 执行测试并验证结果
4. **更新状态**: 标记测试用例为通过/失败
5. **代码质量**: 确保格式化和linting通过
6. **文档更新**: 用结果和注释更新测试用例

### 持续集成集成
1. **自动执行**: 定期运行自动化测试
2. **状态跟踪**: 根据结果更新测试用例状态
3. **失败分析**: 记录和跟踪测试失败
4. **覆盖率报告**: 监控测试覆盖率指标