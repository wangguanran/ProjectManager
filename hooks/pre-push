#!/bin/bash

# Git pre-push hook to run pylint and pytest before pushing
# This script will prevent pushing if tests fail

set -e  # Exit on any error

echo "Running pre-push checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    print_error "Not in a git repository"
    exit 1
fi

# Get the current branch
CURRENT_BRANCH=$(git symbolic-ref --short HEAD)
print_status "Current branch: $CURRENT_BRANCH"

# Check if pylint is installed
if ! command -v pylint &> /dev/null; then
    print_warning "pylint not found. Installing pylint..."
    pip install pylint
fi

# Check if pytest is installed
if ! command -v pytest &> /dev/null; then
    print_warning "pytest not found. Installing pytest..."
    pip install pytest
fi

# Run pylint on all Python files in the project
print_status "Running pylint..."
# Get the git repository root directory
REPO_ROOT=$(git rev-parse --show-toplevel)
# Change to repository root to ensure correct path resolution
cd "$REPO_ROOT"
PY_FILES=$(find . -type f -name '*.py' ! -path './venv/*' ! -path './out/*' ! -path './.cache/*')
if pylint $PY_FILES --rcfile=.pylintrc --output-format=text --reports=y; then
    print_status "Pylint passed ✓"
else
    print_error "Pylint failed ✗"
    print_error "Please fix the linting issues before pushing"
    exit 1
fi

# Run pytest tests
print_status "Running pytest..."
if pytest "$REPO_ROOT/tests/" -v; then
    print_status "Pytest passed ✓"
else
    print_error "Pytest failed ✗"
    print_error "Please fix the failing tests before pushing"
    exit 1
fi

print_status "All pre-push checks passed! ✓"
print_status "Ready to push to $CURRENT_BRANCH" 