[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "multi-project-manager"
version = "0.0.9"
authors = [
  { name="wangguanran", email="elvans.wang@gmail.com" },
]
description = "A comprehensive project and patch management tool for multi-board, multi-project environments with Git integration and automated PO (Patch/Override) operations."
readme = "README.md"
requires-python = ">=3.8"
license = "GPL-3.0"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Version Control :: Git",
    "Topic :: System :: Systems Administration",
    "Topic :: Utilities",
]
dependencies = [
    "configupdater>=3.0.0",
    "toml>=0.10.2",
    "GitPython>=3.1.40",
    'importlib-metadata; python_version < "3.8"',
]

[project.optional-dependencies]
dev = [
    "build>=1.0.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pyinstaller>=6.0.0",
    "pylint>=3.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

[project.urls]
"Homepage" = "https://github.com/wangguanran/ProjectManager"
"Bug Tracker" = "https://github.com/wangguanran/ProjectManager/issues"
"Repository" = "https://github.com/wangguanran/ProjectManager"

[tool.setuptools.packages.find]
where = ["src"] 

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.ini"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-branch",
    "--verbose",
    "--tb=short",
    "--maxfail=5"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.black]
line-length = 120
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

# [tool.mypy]
# python_version = "3.8"
# warn_return_any = true
# warn_unused_configs = true
# disallow_untyped_defs = true
# disallow_incomplete_defs = true
# check_untyped_defs = true
# disallow_untyped_decorators = true
# no_implicit_optional = true
# warn_redundant_casts = true
# warn_unused_ignores = true
# warn_no_return = true
# warn_unreachable = true
# strict_equality = true

# [[tool.mypy.overrides]]
# module = [
#     "GitPython.*",
# ]
# ignore_missing_imports = true

[tool.pylint.main]
fail-under = 10
init-hook = "import sys; import os; sys.path.insert(0, os.getcwd())"
py-version = "3.10"
source-roots = ["src", "tests"]
suggestion-mode = "yes"

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_"]

[tool.pylint.design]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.format]
max-line-length = 100
max-module-lines = 1000

[tool.pylint.messages_control]
disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-implicit-booleaness-not-comparison-to-string",
    "use-implicit-booleaness-not-comparison-to-zero",
    "use-symbolic-message-instead",
    "attribute-defined-outside-init",
    "invalid-name",
    "import-outside-toplevel",
    "too-many-public-methods",
    "too-many-arguments",
    "too-many-positional-arguments",
    "C0301",  # Line too long
    "R0914",  # Too many local variables
    "R0912",  # Too many branches
    "R0915",  # Too many statements
    "R0903",  # Too few public methods
    "W0511",  # TODO/FIXME/XXX comments
    "R1702",  # Too many nested blocks
    "R0911",  # Too many return statements
    "C0302",  # Too many lines in module
]

[tool.pylint.method_args]
timeout-methods = [
    "requests.api.delete",
    "requests.api.get",
    "requests.api.head",
    "requests.api.options",
    "requests.api.patch",
    "requests.api.post",
    "requests.api.put",
    "requests.api.request",
]

[tool.pylint.miscellaneous]
notes = ["FIXME", "XXX", "TODO"]

[tool.pylint.refactoring]
max-nested-blocks = 5
never-returning-functions = ["sys.exit", "argparse.parse_error"]
suggest-join-with-non-empty-separator = "yes"

[tool.pylint.reports]
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"
reports = "no"
score = "yes"

[tool.pylint.similarities]
min-similarity-lines = 4
ignore-comments = "yes"
ignore-docstrings = "yes"
ignore-imports = "yes"
ignore-signatures = "yes"

[tool.pylint.typecheck]
ignore-none = "yes"
ignore-on-opaque-inference = "yes"
missing-member-hint = "yes"
missing-member-hint-distance = 1
missing-member-max-choices = 1 